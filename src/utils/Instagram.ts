import { IUserIG } from "../context/authInstagramContext";
import fetchInstagram from "../services/fetchInstagram";

export class InstagramFetch {
  user: IUserIG;
  setUserIG;
  userId;
  fields = "username,account_type,media_count";
  once = false;

  constructor(user: IUserIG, setUserIG: (user: IUserIG) => void) {
    this.user = user;
    this.userId = user.id;
    this.setUserIG = setUserIG;
    if (!user.userName) {
      if (!this.once && user.id) {
        this.me().then(() => (this.once = true));
      }
    }
  }

  set(user: IUserIG) {
    this.setUserIG(user);
  }

  get() {
    return this.user;
  }

  async me(): Promise<IUserResponse> {
    const userInfo: any = await fetchInstagram(
      `/${this.userId}?fields=${this.fields}`
    );

    const { username, account_type, media_count, id } = userInfo;
    this.set({
      id,
      userName: username,
      accountType: account_type,
      mediaCount: media_count,
    });
    return userInfo.data;
  }

  async media(): Promise<IMediaUserResponse> {
    const { data } = await fetchInstagram(`/${this.userId}/media`);
    return data;
  }
}

// Generated by https://quicktype.io

export interface IUserResponse {
  username: string;
  account_type: string;
  media_count: number;
  id: string;
}

// Generated by https://quicktype.io

export interface IMediaUserResponse {
  data: Datum[];
  paging: Paging;
}

export interface Datum {
  id: string;
}

export interface Paging {
  cursors: Cursors;
}

export interface Cursors {
  before: string;
  after: string;
}
