import fetchMedias from "../services/fetchMedias";

class Medias {
  medias;
  setMedias;
  length = 0;
  once = false;

  constructor(medias: IMediaIG[], setMedias: (medias: IMediaIG[]) => void) {
    this.medias = medias;
    this.setMedias = setMedias;

    this.length = this.medias.length;

    if (this.medias.length <= 0) {
      if (!this.once) {
        this.fetch();
        this.once = true;
      }
    }
  }

  set(medias: IMediaIG[]) {
    this.setMedias(medias);
  }

  get() {
    return this.medias;
  }

  find(id: string) {
    return this.medias.filter((media) => media.id === id)[0];
  }

  getByType(type: string) {
    return this.medias.filter((media) => media.media_type === type);
  }

  map(callback: (media: IMediaIG) => void) {
    return this.medias.map(callback);
  }

  filter(callback: (media: IMediaIG) => boolean) {
    return this.medias.filter(callback);
  }

  count() {
    return this.medias.length;
  }

  countType(type: string) {
    return this.getByType(type).length;
  }

  async fetch() {
    const { data } = await fetchMedias.get("/media");
    this.set(data.data);
    return data;
  }
}

export default Medias;

// Generated by https://quicktype.io

// Generated by https://quicktype.io

export interface IMediasResponse {
  data: IMediaIG[];
  paging: Paging;
}

export interface IMediaIG {
  id: string;
  username: string;
  media_type: string;
  media_url: string;
  permalink: string;
  thumbnail_url?: string;
  timestamp: string;
  caption: string;
  children?: Children;
}

export interface Children {
  data: ChildrenDatum[];
}

export interface ChildrenDatum {
  id: string;
}

export interface Paging {
  cursors: Cursors;
}

export interface Cursors {
  before: string;
  after: string;
}
